Sampaio introduces a system for compilation based on rewrite rules that are proven from basic laws that program constructions obey. The system is shown by developing a compiler for a simple programming language targetting a simple machine. The language is placed into the more general algebraic structure of a specification language that forms a complete lattice, the lattice ordering being refinements that capture the notion of one program being "better than" another. The laws are then described in the specification language. The machine the compilation targets has an instruction set given in terms of assignment operations in the specification language. The compilation proceeds by first applying rewrite rule to break down expressions into a form that can be more easily transformed to machine instructions, then rewriting control constructs in terms of operations on the program counter and transforming programs into a normal form that simuates how they will be run by the machine, and then the variables are replaced by the memory locations at which they are stored by surrounding the program with an encoding and decoding programs that swap memory locations for variables and variables for memory locations respectively. Procedures are handled by separating the procedure out and performing a jump to it, with the return address being stored in a new variable that is introduced; recursion is handled similarly but with the introduction of a stack to store the return address. Parameters are dealt with separately by creating local variables and storing the parameters into them, then placing any return values back into global variables. Sampaio provides an implementation of his approach in the OBJ3 term rewriting system.

This system of constructing compilers is quite neat as it allows compilation of each program construct to be considered independently, which gives it a nice modular structure. By embedding both the high level language and the machine language within the same specification space, Sampaio has allowed compilation to proceed gradually and seamlessly towards a form that can be expressed as machine code. The approach also has a certain integrity as the rules that are used for the compiler were proved from basic laws about each of the constructs in the specification language.

The main criticism is that, though Sampaio proves the rules from simple laws, the laws are only loosely justified and stated as axiomatic. This is somewhat problematic due to the large number of laws stated, though Sampaio does point out that they could be derived from a model of programs such as Hoare and He's relational model or Dijkstra's weakest precondition predicate transformer model. Another thing that is left out is a proper treatment of optimisation as the simplicity of the machine described does not allow for a proper discussion of things that may need to be taken into consideration when compiling for a real machine architecture.
