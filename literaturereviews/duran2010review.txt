Duran describes a system for compiling a simple object-orientated language to a virtual machine program. Similarly to Sampaio's approach, Duran embeds both his language and virtual machine in a broader specification language called Refinement Object-Orientated Language (ROOL). A program in ROOL consists of a series of class declarations followed by a main program and ROOL includes inheritance, class-based visibility, dynamic binding and recursion. Both ROOL and the ROOL Virtual Machine (RVM), which is the target of the comiler Duran presents, bear some similarity to Java and the JVM. The compilation is performed by applying a series of laws to transform the source program into a form that emulates the RVM. This proceeds in 5 stages: 

-- Class Pre-compilation, in which class attributes are made public, it being assumed that the code has already been visibility checked, and redefined methods are moved into the superclass, with casts being introduced to ensure typing remains correct and if statements being used to dynamically run the correct method.

-- Redirection of Method Calls, in which a new class, L, is created that contains methods corresponding to all the methods declared in other classes but which handle argument passing through means of a stack. The method calls in L and the main program are then replaced with calls to methods in L, passing the arguments via a stack, so that the original class methods can be eliminated as they are no longer called anywhere. Some additional classes that declare types and methods used in the RVM are also introduced at this stage.

-- Simplification of Expressions, in which the expressions in the main program and the methods of L are simplified to a form where the commands can be more easily transformed to RVM instructions. This is achieved by eliminating parameterised commands, separating out the conditions of if commands into assignments, reducing if commands with multiple guards to a series of if-then-else commands, handling assignments on the stack, splitting expressions into multiple stack manipulating commands and eliminating redundant stack commands created by this process.

-- Control Elimination, in which the program counter is introduced and the main program is converted to a guarded command set inside a loop, with the guards being program counter values and the commands corresponding to RVM instructions. 

-- Data Refinement, in which the abstract variables used in the program are replaced with the memory locations at which the vaiables are stored. This is achieved by introducing encode and decode methods for each class that convert from the concrete memory to the abstract class structure and vice-versa, then using these methods in encoding and decoding blocks that introduce and end the abstract state respectively.

The system of compilation works well as the source language and the target language are both part of the same specification language, allowing the compilation to gradually and neatly proceed from a ROOL program to an emulation of the RVM running the program, from which RVM bytecode could then be extracted. ROOL includes a lot of different object-oriented features so this work handles a lot of different things, including inheritance and dynamic method calls.

However, this work bases its reasoning on algebraic laws that are only informally justified, which is problematic given that some of the laws are quite complex. Stages of compilation such as typechecking are also skipped and the compiler described goes ahead on the assumption that it has been given correct code, which may be a valid assumption when operating on code generated from a specification but needs to be addressed when creating a more general compiler. Additionally there are features such as exception handling and concurrency that are omitted, though it is noted in the conclusion that other works have looked at those features.  
