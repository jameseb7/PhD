McCarthy and Painter present a compiler for a simple language targetting a simple machine and prove it's correctness. The source language used only contains expression consisting of constants, variables and addition (though it is noted that any binary operation could be substituted for addition), and the target machine consists of an accumulator register and instructions for load immediate, load, store, and add. McCarthy and Painter define functions that give the syntax and semantics of the source and target languages, defining the semantics of the source language by a function that give the value of an expression and the semantics of the target language by a function that maps the initial machine state to the final machine state. The compiler is defined as a function that generates machine instructions according to the type of the input expression (constant, variable or addition) with addition handled by recursively compiling each of the arguments. The correctness of the compiler is then stated as a partial equality (ignoring temporary variables) between the final state of the machine after running the compiled program and the initial state of the machine with the value of the source expression in the accumulator. That is the same as saying the compiled program must output the correct value and not affect any of the input variables but only the temporary variables and the accumulator. The compiler correctness statement is proved by structural induction on the source language.

This proof of compiler correctness is quite neat and simple, providing a good basis for future results, this being the first paper in which the correctness of a compiler was proved, and allowing other operators to be easily added in the same manner as the addition operator. It also appears to meet the goal stated at the beginning of the paper "to make it possible to use a computer to check proofs that compilers are correct", given the simple structure of the source and target languages.

As is to be expected, this paper leaves a lot of room for further work in terms of adding features to the source and target languages and it is suggested that "a complete revision of the formalism will be required" to add features such as sequential composition, conditionals and goto statements. It may also be asked if the definition of compiler correctness used in this paper is a sufficiently good definition as it requires defining a notion of equivalence between the outcome of the source program and the outcome of the target program, which may become increasing complex as the source and target languages are extended.
